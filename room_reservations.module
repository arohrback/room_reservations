<?php
/**
 * @file
 * This module creates a room reservation application.
 *
 * @author Bob Humphrey, Web and Applications Developer, UNCW Randall Library
 */

module_load_include('inc', 'room_reservations', 'room_reservations');       
module_load_include('inc', 'room_reservations', 'room_reservations.node');   
module_load_include('inc', 'room_reservations', 'room_reservations.views');  
module_load_include('inc', 'room_reservations', 'room_reservations.series'); 
  
/**
 * Implements hook_views_api().
 */
function room_reservations_views_api($module, $api) {
  if ($module == 'views' && $api == 'views_default') {
    return array('version' => 2);
  }
}

function room_reservations_form($node, &$form_state) {
  return node_content_form($node, node_type_get_type($node));
}
    
/**
 * Implements hook_node_info().
 * Establish our custom content types.
 */
function room_reservations_node_info() {
  return array(
    'room_reservations_room' => array(
      'name' => t('Room Reservations Room'),
      'base' => 'room_reservations',
      'description' => t('A reservable room.'),
      'has_title' => TRUE,
      'title_label' => t('Name'),
      'has_body' => TRUE,
      'body_label' => t('Description'),
      'locked' => TRUE,
    ),            
    'room_reservations_reservation' => array(
      'name' => t('Room Reservations Reservation'),
      'base' => 'room_reservations',
      'description' => t('A room reservation.'),
      'has_title' => TRUE, 
      'title_label' => t('Meeting Name'),
      'title_description' => t('Identifies your group on the reservation calendar.'), 
      'has_body' => FALSE,
      'locked' => TRUE,
    ),        
  );
}

/**
 * Implements hook_entity_info_alter().
 * Adds reservation calendar view mode to room content type
 */
function room_reservations_entity_info_alter(&$entity_info) {

  $entity_info['node']['view modes'] += array(
    'reservation_calendar' => array(
      'label' => t('Reservation calendar header'),
      'custom settings' => FALSE,
    ),
  );

  return $entity_info;
}

/**
 * Implements hook_menu().
 */
function room_reservations_menu() {
  $app_title = variable_get('room_reservations_title', 'Room Reservations');
  $items['admin/config/system/room_reservations'] = array(
    'title' => $app_title,
    'description' => 'Configure room reservation options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('room_reservations_admin_settings'),
    'access arguments' => array('administer room reservations system'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'room_reservations.admin.inc',
    'weight' => 0,
  );
  $items['admin/config/system/room_reservations/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer room reservations system'),
    'weight' => 10,
  );
  $items['admin/config/system/room_reservations/settings/general'] = array(
    'title' => 'General',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer room reservations system'),
    'weight' => 10,
  );
  $items['admin/config/system/room_reservations/hours'] = array(
    'title' => 'Hours',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('room_reservations_admin_settings_default_hours'),
    'access arguments' => array('administer room reservations system'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'room_reservations.admin.inc',
    'weight' => 20,
  );
  $items['admin/config/system/room_reservations/hours/default_hours'] = array(
    'title' => 'Default Hours',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer room reservations system'),
    'weight' => 10,
  );
  $items['admin/config/system/room_reservations/hours/daily_hours'] = array(
    'title' => 'Daily Hours',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('room_reservations_admin_settings_daily_hours'),
    'access arguments' => array('administer room reservations system'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'room_reservations.admin.inc',
    'weight' => 20,
  );
  $items['admin/config/system/room_reservations/page'] = array(
    'title' => 'Display Text',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('room_reservations_admin_display_text_page'),
    'access arguments' => array('administer room reservations system'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'room_reservations.admin.inc',
    'weight' => 30,
  );
  $items['room_reservations'] = array(
    'title' => variable_get('room_reservations_title', 'Room Reservations'),
    'page callback' => 'room_reservations',
    'access arguments' => array('view room reservations calendar'),
    'type' => MENU_NORMAL_ITEM,
    'file' => '/controller/room_reservations_calendar.controller.inc',
  );
  $items['room_reservations/calendar'] = array(
    'title' => 'Calendar',  
    'access arguments' => array('view room reservations calendar'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 10,
  );
  $items['room_reservations/policies'] = array(
    'title' => 'Policies',
    'page callback' => 'room_reservations_policies',
    'access arguments' => array('view room reservations calendar'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
    'file' => '/controller/room_reservations.controller.inc',
  );
  $items['room_reservations/outlook-import'] = array(
    'title' => t('Import from Outlook'),
    'description' => t('Pull in meeting data from Outlook'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('room_reservations_request'),
    'access arguments' => array('administer room reservations system'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['room_reservations/outlook-import-event'] = array(
    'page callback' => 'room_reservations_import_from_outlook',
    'access arguments' => array('administer room reservations system'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_init().
().
 */
function room_reservations_init() {
  // Add javascript.
  drupal_add_js(drupal_get_path('module', 'room_reservations') . '/room_reservations.js');
  // Add css.
  drupal_add_css(drupal_get_path('module', 'room_reservations') . '/room_reservations.css');
  // Prevent this module from caching.
  if ((drupal_match_path($_GET['q'], 'room_reservations')) || (drupal_match_path($_GET['q'], 'room_reservations/*'))) {
    $GLOBALS['conf']['cache'] = FALSE;
  }
}

/**
 * Implements hook_permission().
 */
function room_reservations_permission() {
  return array(
    'administer room reservations system' => array(
      'title' => t('Administer the room reservations system'),
      'description' => t('Allows administration of room categories, rooms and reservations. Allows administering all system configuration settings.'),
    ),    
    'edit any room reservation' => array(
      'title' => t('Edit any room reservation'),
      'description' => t('Allows editing of all room reservations in the system.'),
    ),    
    'delete any room reservation' => array(
      'title' => t('Delete any room reservation'),
      'description' => t('Allows deleting of any room reservation in the system.'),
    ),
    'create room reservations standard' => array(
      'title' => t('Create room reservations as well as edit or cancel your own reservations. Book in advance standard limit.'),
      'description' => t('Create room reservations as well as edit or cancel your own reservations'),
    ),                
    'create room reservations extended' => array(
      'title' => t('Create room reservations as well as edit or cancel your own reservations. Book in advance extended limit.'),
      'description' => t('Create room reservations as well as edit or cancel your own reservations'),
    ),       
    'bypass minimum advance booking' => array(
      'title' => t('Bypass minimum advanced booking limit.'),
      'description' => t('Bypass minimum advanced booking limit.'),
    ),    
    'book over buffer' => array(
      'title' => t('Allow booking over setup/takedown buffers.'),
      'description' => t('Allow user to book over top of the setup/takedown buffer for an existing reservation.'),
    ),
    'create room reservations extended length' => array(
      'title' => t('Create extended maximum length room reservations.'),
      'description' => t('Create extended length reservations.'),
    ),
    'view room reservations calendar' => array(
      'title' => t('View the room reservations calendar'),
      'description' => t('Allowed to view the reservations calendar but does not allow creating new reservations.'),
    ),
  );
}

/**
 * Implements hook_node_access()
 * 
 *  rev 1.3 - change all node access deny to node access ignore so that other modules may better integrate 
 *    - i.e. if DENY is set no other module can override that
 * 
 *  NOTE - this hook is not called for user 1
 */
function room_reservations_node_access($nodetype_or_node, $op, $account) {
  if (is_object($nodetype_or_node)) {
    $nodetype = $nodetype_or_node->type;
  }
  else {
    $nodetype = $nodetype_or_node;
  }
  switch ($nodetype) {
    case 'room_reservations_category': 
    case 'room_reservations_room':
      switch ($op) {
        case 'create':
        case 'update':
        case 'delete':
          return user_access('administer room reservations system') ? NODE_ACCESS_ALLOW : NODE_ACCESS_IGNORE;
      }
      break;
    
    case 'room_reservations_reservation':
      global $user;
      // if it is my reservation; do nothing (let Drupal handle as usual)
      if ((is_object($nodetype_or_node) && $nodetype_or_node->uid == $user->uid)) {
        return NODE_ACCESS_IGNORE;
      }
      else {
        switch ($op) {
          case 'create':
            // if we are trying to create a reservation let's make sure user hasn't just entered dates via url
            // if there aren't any URL arguments then never mind
            if (arg(3) == NULL) {
              return NODE_ACCESS_IGNORE;
            }
            // since available lengths takes allowed dates into account; lets just use that
            $yyyymmdd = _room_reservations_yyyymmdd((int) arg(3), (int) arg(4));
            $lengths = _room_reservations_valid_lengths(arg(6), $yyyymmdd, arg(5));
            if (count($lengths)) {
              foreach ($lengths as $length) {
                if ($length['is_valid']) {
                  return (user_access('create room reservations standard') || user_access('create room reservations extended') 
                    || user_access('administer room reservations system')) ? NODE_ACCESS_ALLOW : NODE_ACCESS_IGNORE;
                }
              }
            }
            return NODE_ACCESS_DENY;
          case 'update':
            return (user_access('administer room reservations system') || user_access('edit any room reservation')) ? NODE_ACCESS_ALLOW : NODE_ACCESS_IGNORE;
          case 'delete':
            return (user_access('administer room reservations system') || user_access('delete any room reservation')) ? NODE_ACCESS_ALLOW : NODE_ACCESS_IGNORE;
          case 'view':
            return user_access('administer room reservations system') ? NODE_ACCESS_ALLOW : NODE_ACCESS_IGNORE;
        }
      }
      break;
  }
}

/**
* remove std Node perms for all types associated with Room Reservations
*  
* @param mixed $form
* @param mixed $form_state
* @param mixed $form_id
*/
function room_reservations_form_user_admin_permissions_alter(&$form, &$form_state, $form_id) {
  foreach ($form['permission'] as $perm => $value) {
    if (stristr($perm, 'content') && stristr($perm, 'room_reservations_')) {
      unset($form['permission'][$perm]);
    } 
  } 
  
  foreach ($form['checkboxes'] as $box => $settings) {
    foreach ($settings['#options'] as $index => $option) {
      if (stristr($index, 'content') && stristr($index, 'room_reservations_')) {
        unset($form['checkboxes'][$box]['#options'][$index]);
      }
    }
  }
}

function room_reservations_form_room_reservations_reservation_node_form_alter(&$form, &$form_state) {
  // params either passed in on url -  CREATE
  global $user;
  $form['field_reservation_contact_email'][LANGUAGE_NONE][0]['email']['#default_value'] = empty($form['field_reservation_contact_email'][LANGUAGE_NONE][0]['email']['#default_value']) ? $user->mail : $form['field_reservation_contact_email'][LANGUAGE_NONE][0]['email']['#default_value'];
  // or pulled from node - EDIT
  if (user_access('administer site configuration') && isset($_GET['edit']) && $_GET['edit'] == 'standard') {
    return;
  }
    
  // EDIT
  if ($nid = $form['nid']['#value']) {
    $res = $form['#node'];
    $rid = $res->field_reservation_room[LANGUAGE_NONE][0]['target_id'];
    $d = $res->field_reservation_date[LANGUAGE_NONE][0]['value'];  
    $yyyymmdd = date('Y-m-d', strtotime($d)); 
    $t = $res->field_reservation_time[LANGUAGE_NONE][0]['value']; 
  }
  
  // CREATE NEW
  else {    
    // if no parameters passed; lets redirect to calendar page
    if (!arg(3) && !arg(4)) {
      drupal_goto('room_reservations');
    }
    // determine if this year or next year
    $yearnow = date('Y');
    $absdaynow = date('z');
    $absdaydefault = date('z', mktime(0, 0, 0, arg(3), arg(4), $yearnow));
    if ($absdaynow > $absdaydefault) {
      $year = $yearnow + 1;
    }
    else {
      $year = $yearnow;
    }
    $rid = arg(6);
    $yyyymmdd = date('Y-m-d', strtotime($year . '-' . arg(3) . '-' . arg(4)));     
    $d = $yyyymmdd . ' 00:00:00';
    $t = arg(5);
  }
  
  $room = node_load($rid);
  $date = date('l, M d, Y', strtotime($d));
  $time = _room_reservations_display_time($t);
  
  $form['reservation_heading']['#type'] = 'markup';
  $form['reservation_heading']['#markup'] = '
    <h2 class="reservation-h2">' . t('Reservation booking for') . ':</h2><div><strong>' . t('Room') . ': ' . $room->title . '</strong></div>
    <div><strong>' . t('Date') . ': ' . $date . '</strong></div>
    <div><strong>' . t('Time') . ': ' . $time . '</strong></div>
    <br>';
  
  $form['field_reservation_room']['#access'] = 0;
  $form['field_reservation_date']['#access'] = 0;
  $form['field_reservation_time']['#access'] = 0;      
  $form['field_reservation_room'][LANGUAGE_NONE]['#default_value'] = $room->nid;
  
  // Date fields are a major pita, setting default does nothing here; we need to carry this forward to the node_presave hook
  $form['#node']->date_default = $d;
  $form['field_reservation_time'][LANGUAGE_NONE][0]['value']['#default_value'] = $t;
  
  // remove Preview - can likely do this in node def
  unset($form['actions']['preview']);
  
  // hide Series ID field
  $form['field_reservation_seriesid']['#access'] = FALSE;
  
  // if we are editing; let's do some extra things:
  //  - disable Repeat options
  //  - (series) add msg that we are editing a series and link to edit just that entry
  if ($nid) {
    $form['field_reservation_repeat_type']['#disabled'] = TRUE;
    $form['field_reservation_repeat_until']['#disabled'] = TRUE;

    // form alter is hit in/out of form so we alter only in so we dont show msgs after form is submitted - !count($form_state['input'])
    if ($form['field_reservation_seriesid'][LANGUAGE_NONE][0]['value']['#default_value'] && !count($form_state['input'])) {
      if (isset($_GET['single'])) {
        $series_link = l(t('Click here'), "node/$nid/edit");
        drupal_set_message(t('NOTE: you are editing a SINGLE day in a SERIES of reservations. Any changes made here will impact only the reservation  
          for this day. !link if you want to edit the entire series.', array('!link' => $series_link)), 'warning');  
      }
      else {
        $single_link = l(t('Click here'), "node/$nid/edit", array('query' => array('single' => 1)));
        drupal_set_message(t('NOTE: you are editing a SERIES of reservations. Any changes made here will impact all reservations in this 
          series. !link if you only want to edit this specific day in this series.', array('!link' => $single_link)), 'warning');
      }
    }
    
    // and then parts that have to be here on both passes
    if ($form['field_reservation_seriesid'][LANGUAGE_NONE][0]['value']['#default_value']) {
       if (isset($_GET['single'])) {
        // relabel Delete to Cancel Reservation 
        $form['actions']['delete']['#value'] = t('Cancel Reservation for This Day');
      }
      else {
        // remove single node delete and add Delete Series button
        unset($form['actions']['delete']);
        $form['actions']['delete_series'] = array(
          '#type' => 'submit',
          '#value' => t('Cancel Entire Series Reservation'),
          '#weight' => 20,
          '#submit' => array('_room_reservations_series_delete'),
        ); 
      }     
    }
    
    // and if not part of a series; let's change DELETE button
    if (!$form['field_reservation_seriesid'][LANGUAGE_NONE][0]['value']['#default_value']) {
      $form['actions']['delete']['#value'] = t('Cancel Reservation');
    }
  }
  // Validate meeting conditions with room policies.
  $form['#validate'][] = 'room_reservations_validate_reservation';
  // always redirect back to reservations calendar page
  $form['actions']['submit']['#submit'][] = 'return_to_reservations_page';
  
  // limit valid lengths so we have no overlaps
  $validlengths = _room_reservations_valid_lengths($rid, $yyyymmdd, $t);
  $lengths = array();
  foreach ($validlengths as $length) {
    if ($length['is_valid']) {
      $lengths[] = $length['length'];
    }
  }
  foreach ($form['field_reservation_length'][LANGUAGE_NONE]['#options'] as $slot => &$option) {
    if (!in_array($slot, $lengths)) {
      unset($form['field_reservation_length'][LANGUAGE_NONE]['#options'][$slot]);
    }
  } 
  
  $form['field_reservation_repeat_type'][LANGUAGE_NONE]['#default_value'] = $form['field_reservation_repeat_type'][LANGUAGE_NONE]['#default_value'] ? $form['field_reservation_repeat_type'][LANGUAGE_NONE]['#default_value'] : 1;
  $form['field_reservation_repeat_until']['#states'] = array(
    'visible' => array(
      ':input[name="reservation_repeat_type[und]"]' => array('!value' => '1'),
    ),
  );
  
  return;  
}

function room_reservations_validate_reservation($form, &$form_state) {
  // Load the meeting's room as an EMW.
  $room = entity_metadata_wrapper('node', $form_state['values']['field_reservation_room'][LANGUAGE_NONE][0]['target_id']);
  $values = $form_state['values'];
  // Check meeting details against room policies.
  // If the meeting will have food and the room doesn't allow it, say so.
  if ($values['field_reservation_food'][LANGUAGE_NONE][0]['value'] && $room->field_reservations_room_food_ok->value() == FALSE) {
    form_set_error('field_reservation_food', variable_get('room_reservations_food_conflict', t('This room does not allow food.')));
  }
  // TODO: Check equipment needs against room availability.
}

function room_reservations_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
  if ($form['#node']->type == 'room_reservations_reservation') {
    $form['#submit'][] = 'return_to_reservations_page';
  }
  return;
}

function room_reservations_node_presave($node) {
  switch ($node->type) {
    case 'room_reservations_reservation':
      if (isset($node->date_default)) {
        $node->field_reservation_date[LANGUAGE_NONE][0]['value'] = $node->date_default;
      }
      break;
  }
}

function room_reservations_date_popup_process_alter(&$element, &$form_state, &$context) {
  if (isset($element['#field']['field_name'])) {
    switch ($element['#field']['field_name']) {
      case 'field_reservation_repeat_until': {
        if (user_access('create room reservations extended')) {
          $advancedays = variable_get('room_reservations_advance_extended', 180);
        }
        else {
          $advancedays = variable_get('room_reservations_advance_standard', 14);
        }
        $element['#datepicker_options'] = array(
          'minDate' => '+0d',
          'maxDate' => $advancedays . 'D',
        );
        $element['date'] = date_popup_process_date_part($element);
      }
      break;
    }
  }
}

function return_to_reservations_page($form, &$form_state) {
  // can't set redirect here for DELETE function; see delete confirm form alter above
  if ($form_state['clicked_button']['#id'] == 'edit-delete') {
    return;
  }
  
  $rid = $form_state['values']['field_reservation_room'][LANGUAGE_NONE][0]['target_id'];
  $rooms = _room_reservations_rooms();
  $room = $rooms[$rid];
  // TODO: Load category taxonomy term and use its properties.
  $category = array('title' => 'Category Placeholder');
  $anchor = strtolower(preg_replace('/[^a-zA-Z0-9-]+/', '-', $category['title']));
  
  // need to handle both update and delete case
  $date = $form['#node']->field_reservation_date[LANGUAGE_NONE][0]['value'] ? $form['#node']->field_reservation_date[LANGUAGE_NONE][0]['value'] : $form_state['values']['field_reservation_date'][LANGUAGE_NONE][0]['value'];
  if ($date) {
    $return = date('n/d', strtotime($date));
    //$form_state['redirect'] = array('room_reservations/' . $return, array('fragment' => $anchor));
    $form_state['redirect'] = array('room_reservations/' . $return);

  }
}

/**
 * Implements hook_theme().
 */
function room_reservations_theme() {
  return array(
    'room_reservations' => array(
      'variables' => array(
        'dates',
        'categories',
        'hours',
        'building_hours',
        'building_hours_display',
        'rooms',
        'selected_category',
        'user_reservations',
      ),
      'template' => 'room-reservations',
      'file' => '/includes/room_reservations.display.inc',
    ),
    'room_category' => array(
      'variables' => array(
        'dates',
        'categories',
        'hours',
        'building_hours',
        'building_hours_display',
        'rooms',
        'selected_category',
        'user_reservations',
      ),
      'template' => 'room-reservations--room-category',
      'file' => '/includes/room_reservations.display.inc',
    ),
    'room_reservations__room' => array(
      'variables' => array(
        'dates',
        'categories',
        'hours',
        'building_hours',
        'building_hours_display',
        'user_reservations',
      ),
      'template' => 'room-reservations--room',
      'file' => '/includes/room_reservations.display.inc',
    ),
    'room_reservations__slot' => array(
      'variables' => array(
        'dates',
        'hours',
        'user_reservations',
      ),
      'template' => 'room-reservations--slot',
      'file' => '/includes/room_reservations.display.inc',
    ),
  );
}

/**
 * Implements hook_mail().
 */
function room_reservations_mail($key, &$message, $params) {
  global $base_url;
  $modified_base_url = str_replace('https', 'http', $base_url);
  $headers = array(
    'MIME-Version' => '1.0',
    'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
    'Content-Transfer-Encoding' => '8Bit',
    'X-Mailer' => 'Drupal',
  );
  switch ($key) {
    case 'confirmation':
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      $message['subject'] = _room_reservations_replace_tokens(check_plain(
        _room_reservations_get_variable('confirmation_header_text')), $params);
      $body = _room_reservations_replace_tokens(check_markup(
        _room_reservations_get_variable('confirmation_owner_text')), $params);
      $message['body'][] = '<html><body>' . $body . '</body></html>';
      break;

    case 'notification':
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      $message['subject'] = _room_reservations_replace_tokens(check_plain(
        _room_reservations_get_variable('confirmation_header_text')), $params);
      $body = _room_reservations_replace_tokens(check_markup(
        _room_reservations_get_variable('confirmation_group_text')), $params);
      $message['body'][] = '<html><body>' . $body . '</body></html>';
      break;

    case 'owner reminder':
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      $message['subject'] = _room_reservations_replace_tokens(check_plain(
        _room_reservations_get_variable('reminder_header_text')), $params);
      $body = _room_reservations_replace_tokens(check_markup(
        _room_reservations_get_variable('reminder_owner_text')), $params);
      $message['body'][] = '<html><body>' . $body . '</body></html>';
      break;

    case 'group reminder':
      foreach ($headers as $key => $value) {
        $message['headers'][$key] = $value;
      }
      $message['subject'] = _room_reservations_replace_tokens(check_plain(
        _room_reservations_get_variable('reminder_header_text')), $params);
      $body = _room_reservations_replace_tokens(check_markup(
        _room_reservations_get_variable('reminder_group_text')), $params);
      $message['body'][] = '<html><body>' . $body . '</body></html>';
      break;
  }
}

/**
 *  Implements hook_action_info()
 *  Creates Views bulk operations to approve/unapprove reservations.
 */
function room_reservations_action_info() {
  return array(
    'room_reservations_bulk_approve' => array(
      'type' => 'node',
      'label' => t('Approve reservations'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
    'room_reservations_bulk_unapprove' => array(
      'type' => 'node',
      'label' => t('Unapprove reservations'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

function room_reservations_bulk_approve(&$node, $context) {
  $node->field_reservation_approved[LANGUAGE_NONE][0]['value'] = 1;
  if (!empty($node->field_reservation_seriesid[LANGUAGE_NONE][0]['value'])) {
    $series_id = $node->field_reservation_seriesid[LANGUAGE_NONE][0]['value'];
    if ($node->nid == $series_id) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'room_reservations_reservation')
        ->fieldCondition('field_reservation_seriesid', 'value', $series_id, '=');
      $result = $query->execute();
      if (isset($result['node']) && count($result['node']) > 0) {
        $series_nids = array_keys($result['node']);
        $series_nodes = entity_load('node', $series_nids);
        foreach($series_nodes as $series_node) {
          $series_node->field_reservation_approved[LANGUAGE_NONE][0]['value'] = 1;
          $series_node->saved = TRUE;
          node_save($series_node);
        }
      }
    }
  }
}

function room_reservations_bulk_unapprove(&$node, $context) {
  $node->field_reservation_approved[LANGUAGE_NONE][0]['value'] = 0;
  if (!empty($node->field_reservation_seriesid[LANGUAGE_NONE][0]['value'])) {
    $series_id = $node->field_reservation_seriesid[LANGUAGE_NONE][0]['value'];
    if ($node->nid == $series_id) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'room_reservations_reservation')
        ->fieldCondition('field_reservation_seriesid', 'value', $series_id, '=');
      $result = $query->execute();
      if (isset($result['node']) && count($result['node']) > 0) {
        $series_nids = array_keys($result['node']);
        $series_nodes = entity_load('node', $series_nids);
        foreach($series_nodes as $series_node) {
          $series_node->field_reservation_approved[LANGUAGE_NONE][0]['value'] = 0;
          $series_node->saved = TRUE;
          node_save($series_node);
        }
      }
    }
  }
}

function room_reservations_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'room_reservations');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path . '/templates');
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

function room_reservations_request($form, $form_state) {
  // These two enable AJAX compatibility in old IE
  drupal_add_js('//cdnjs.cloudflare.com/ajax/libs/bluebird/3.3.4/bluebird.min.js', 'external');
  drupal_add_js('//cdnjs.cloudflare.com/ajax/libs/fetch/2.0.3/fetch.min.js', 'external');
  // This one runs the Microsoft API integration
  drupal_add_js('https://secure.aadcdn.microsoftonline-p.com/lib/0.1.3/js/msal.min.js', 'external');
  // This runs the web app
  drupal_add_js(drupal_get_path('module', 'room_reservations') . '/js/outlook.js');
  // And this has the web app configuration data
  drupal_add_js(drupal_get_path('module', 'room_reservations') . '/js/msalconfig.js');
  // Here we insert the list of rooms so the web app can match them up with Outlook events
  $rooms_query = new EntityFieldQuery();
  $rooms_query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'room_reservations_room');
  $result = $rooms_query->execute();
  $rooms = node_load_multiple(array_keys($result['node']));
  drupal_add_library('system', 'drupal.ajax');
  drupal_add_js(array(
    'room_reservations' => array(
      'rooms' => $rooms,
    ),
  ), 'setting');
  $form['outlook_signin'] = array(
    '#type' => 'button',
    '#value' => t('Sign into Outlook'),
    '#description' => t('Click to sign into your Outlook credentials for calendar access.'),
  );
  $form['status_element'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('element-invisible'),
    ),
  );
  $form['error_messages'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('element-invisible'),
    ),
  );
  $form['signout'] = array(
    '#type' => 'button',
    '#value' => t('Sign Out of Outlook'),
    '#attributes' => array(
//      'class' => array('element-invisible'),
    ),
  );

  return $form;
  
} 

function room_reservations_import_from_outlook() {
  global $user;
  $event = $_POST;
  // First let's see if there's any actual contents in the "description" element
  $event['description'] = preg_replace('/<!--.*?-->/gs', '', $event['description']);
  $dom = new DOMDocument('1.0', 'iso-8859-1');
  $dom->preserveWhiteSpace = false;
  if ($dom->loadHTML($event['description'])) {
    $desc_text = $dom->textContent;
    if (strlen($desc_text) < 4) {
      $event['description'] = '';
    } else {
      $event['description'] = $desc_text;
    }
  } else {
    $event['description'] = '';
  }
  // Get the room node from the roomName property.
  $rooms_query = new EntityFieldQuery();
  $rooms_query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'room_reservations_room')
    ->propertyCondition('title', $event['roomName']);
  $result = $rooms_query->execute();
  if (!empty($result['node'])) {
    $room_nid = key($result['node']);
  }
  // Let's parse the startDate field too
  $meeting_time = strtotime($event['startTime']);
  $hours = date('G', $meeting_time);
  $minutes = date('i', $meeting_time);
  $repeat_end = strtotime('+360 days', $meeting_time);
  $minutes = $minutes > 30 ? '30' : '00';
  // Round up the duration to the nearest half-hour interval.
  $event['duration'] = 30 * ceil($event['duration'] / 30);
  // Create a new room reservation node.
  $values = array(
    'type' => 'room_reservations_reservation',
    'uid' => $user->uid,
    'status' => 1,
    'comment' => 0,
    'promote' => 0,
  );
  $reservation = entity_create('node', $values);
  $wrapper = entity_metadata_wrapper('node', $reservation);
  $wrapper->title->set($event['title']);
  // fill in the fields.
  $wrapper->field_reservation_contact_email->set($event['email']);
  $wrapper->field_reservation_private->set(FALSE);
  $wrapper->field_reservation_approved->set(FALSE);
  $wrapper->field_reservation_room->set($room_nid);
  $wrapper->field_reservation_food->set(FALSE);
  $wrapper->field_reservation_date->set($meeting_time);
  $wrapper->field_reservation_time->set($hours . $minutes);
  $wrapper->field_reservation_length->set($event['duration']);
  $wrapper->body->set(array('value' => $event['description']));
  if (isset($event['recurrence'])) {
    $event['recurrence'] = json_decode($event['recurrence']);
    // set repeat end date to 360 days from the first meeting
    // this module doesn't support endless recurrence so this will have to do
    $wrapper->field_reservation_repeat_until->set($repeat_end);
    switch($event['recurrence']->pattern->type) {
      case 'daily':
        $wrapper->field_reservation_repeat_type->set('2');
        break;
      case 'weekly':
        switch($event['recurrence']->pattern->interval) {
          case 1:
            $wrapper->field_reservation_repeat_type->set('3');
            break;
          case 2:
            $wrapper->field_reservation_repeat_type->set('4');
            break;
        }
        break;
      case 'relativeMonthly':
        $wrapper->field_reservation_repeat_type->set('5');
        break;
    }
  } else {
    $wrapper->field_reservation_repeat_type->set('1');
  }
  $wrapper->save();
}

/**
 *  Generates an iCal file for the event.
  * Usage
 * -----
 * Basic usage - generate ics file contents (see below for available properties):
 *   $ics = new ICS($props);
 *   $ics_file_contents = $ics->to_string();
 *
 * Setting properties after instantiation
 *   $ics = new ICS();
 *   $ics->set('summary', 'My awesome event');
 *
 * You can also set multiple properties at the same time by using an array:
 *   $ics->set(array(
 *     'dtstart' => 'now + 30 minutes',
 *     'dtend' => 'now + 1 hour'
 *   ));
 *
 * Available properties
 * --------------------
 * description
 *   String description of the event.
 * dtend
 *   A date/time stamp designating the end of the event. You can use either a
 *   DateTime object or a PHP datetime format string (e.g. "now + 1 hour").
 * dtstart
 *   A date/time stamp designating the start of the event. You can use either a
 *   DateTime object or a PHP datetime format string (e.g. "now + 1 hour").
 * location
 *   String address or description of the location of the event.
 * summary
 *   String short summary of the event - usually used as the title.
 * url
 *   A url to attach to the the event. Make sure to add the protocol (http://
 *   or https://).
 */

function room_reservations_generate_ical($node) {
  module_load_include('inc', 'room_reservations', 'room_reservations.ical');
  $wrapped = entity_metadata_wrapper($node->type, $node);
  $start = $wrapped->field_reservation_date->value();
  $props = array(
    'description' => check_plain($node->body->value()),
  );
  echo $start;
//  $ics = new ICS($props);
  
}